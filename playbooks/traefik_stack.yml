---

- hosts: last-try.org
  vars:
    stack_name: traefik
    stack_dir_root: "/home/{{ ansible_user }}/stacks"
    stack_dir: "{{ stack_dir_root }}/{{ stack_name }}"
  tasks:
    - name: Create NFS dirs
      file:
        path: /srv/nfs/docker-swarm/traefik_stack/acme_data
        state: directory
        mode: "0777"
      become: yes
    - name: Create network web
      docker_network:
        name: web
        driver: overlay
    - name: Deploy traefik
      docker_stack:
        state: present
        prune: true
        name: "{{ stack_name }}"
        compose:
          - version: '3.7'
            services:
              traefik:
                image: traefik:v2.1 # The official Traefik docker image
                deploy:
                  restart_policy:
                    condition: any
                  placement:
                    constraints:
                      - node.role == manager
                  labels:
                    - traefik.enable=true
                    - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
                    - traefik.http.routers.http-catchall.entrypoints=web
                    - traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker
                    - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

                    - traefik.http.routers.api.rule=Host(`traefik.last-try.org`)
                    - traefik.http.routers.api.service=api@internal
                    - traefik.http.routers.api.middlewares=auth
                    - traefik.http.routers.api.tls=true
                    - traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$05$$j/9gOK/CRsNQgb6O9UrjcuDP9w7Ud4SX8YtAxS8jXvLHsret6AvaS
                    - traefik.http.services.dummy-svc.loadbalancer.server.port=1488
                    - traefik.http.routers.api.tls.certresolver=le

                    - traefik.http.routers.prometheus-traefik.rule=Host(`traefik.last-try.org`) && Path(`/metrics`)
                    - traefik.http.routers.prometheus-traefik.entrypoints=metrics
                    - traefik.http.routers.prometheus-traefik.service=prometheus@internal
                command:
                  - --api=true
                  # - --log.level=DEBUG # debug while we get it working, for more levels/info see https://docs.traefik.io/observability/logs/
                  - --providers.docker=true
                  - --providers.docker.watch=true
                  - --providers.docker.swarmMode=true
                  - --providers.docker.exposedbydefault=false
                  - --providers.docker.network=web
                  - --entrypoints.web.address=:80
                  - --entrypoints.websecure.address=:443
                  - --entrypoints.metrics.address=:8080
                  - --certificatesresolvers.le.acme.email=admin@last-try.org
                  - --certificatesresolvers.le.acme.storage=/etc/traefik/acme/acme.json
                  - --certificatesresolvers.le.acme.httpChallenge.entryPoint=websecure
                  # - --certificatesresolvers.le.acme.httpchallenge=true

                  # - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
                  - --certificatesresolvers.le.acme.tlschallenge=true
                  # - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
                  - --metrics.prometheus=true
                  - --metrics.prometheus.manualrouting=true
                ports:
                  - target: 80
                    published: 80
                    mode: host
                  - target: 443
                    published: 443
                    mode: host
                  - target: 8080
                    published: 8080
                    mode: host
                networks:
                  - web
                volumes:
                  - traefik_acme:/etc/traefik/acme
                  - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
            networks:
              web:
                external: true
            volumes:
              traefik_acme:
                driver: local
                driver_opts:
                  type: nfs4
                  o: "addr={{ nfs_ip }}"
                  device: ":/docker-swarm/traefik_stack/acme_data"
